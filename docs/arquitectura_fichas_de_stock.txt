Propuesta de Arquitectura: Fichas de Declaraci√≥n de Stock

## 1. Problema Identificado

El sistema actual registra el stock como "hechos" individuales en la tabla `stock_animals`, pero carece de un concepto de "evento de declaraci√≥n" o "ficha" que agrupe estos registros en una sola fotograf√≠a coherente del stock de un productor en un momento determinado. Esto dificulta la trazabilidad y la gesti√≥n de las declaraciones como una unidad.

---

## 2. Soluci√≥n Propuesta: El Concepto de "Ficha de Declaraci√≥n"

Materializar el concepto de "ficha" en la base de datos, creando una nueva tabla que represente cada evento de declaraci√≥n de stock. Esto proporciona integridad, trazabilidad y una mejor experiencia de usuario.

---

## 3. Plan de Implementaci√≥n

### Paso 1: Crear la tabla `declaraciones_stock`

Crear una nueva migraci√≥n para una tabla que ser√° la entidad central de este flujo.

**Columnas:**
- `id` (Clave Primaria)
- `productor_id` (FK a `productores.id`): Qui√©n hizo la declaraci√≥n.
- `periodo_id` (FK a `configuracion_actualizacions.id`): A qu√© periodo corresponde.
- `fecha_declaracion` (Date): Cu√°ndo se realiz√≥ la declaraci√≥n.
- `estado` (String): Para manejar el ciclo de vida de la ficha. Valores sugeridos: `en_progreso`, `completada`, `archivada`.
- `observaciones` (Text, nullable): Notas generales sobre la declaraci√≥n.
- `timestamps` (created_at, updated_at)

### Paso 2: Modificar la tabla `stock_animals`

Actualizar la tabla existente para que cada registro de stock pertenezca a una √∫nica declaraci√≥n.

**Acciones:**
- **A√±adir columna:** `declaracion_id` (FK a `declaraciones_stock.id`).
- **Eliminar columna (Recomendado):** `periodo_actualizacion_id`. Esta informaci√≥n ahora se obtiene a trav√©s de la relaci√≥n `declaracion->periodo`, simplificando el modelo y evitando la duplicaci√≥n de datos.
- **Eliminar columna (Recomendado):** `es_actualizacion_periodica`. El contexto de la declaraci√≥n ahora define esto.

### Paso 3: Implementar el Nuevo Flujo de Usuario (UX)

1.  **Iniciar Declaraci√≥n:** Desde el "Cuaderno de Campo", el productor inicia una "Nueva Declaraci√≥n". Esto crea un registro en `declaraciones_stock` con estado `en_progreso`.
2.  **Carga de Animales:** Se presenta una interfaz para a√±adir/editar/eliminar l√≠neas de stock (registros en `stock_animals`). Todos los registros creados en esta fase se asocian a trav√©s del `declaracion_id`. El productor puede guardar y continuar m√°s tarde.
3.  **Finalizar Declaraci√≥n:** Al terminar, un bot√≥n "Finalizar y Enviar" cambia el estado de la declaraci√≥n a `completada`, bloqueando la edici√≥n de sus registros de stock asociados.

---

## 4. Ventajas de la Soluci√≥n

- **Integridad de Datos:** Agrupa de forma inequ√≠voca todos los registros de una misma declaraci√≥n.
- **Trazabilidad Completa:** Permite ver "fotos" exactas del stock en diferentes momentos.
- **Mejor Experiencia de Usuario:** El concepto de una "ficha" o "borrador" es m√°s natural e intuitivo.
- **Flexibilidad:** Permite manejar borradores, correcciones y un historial claro de declaraciones.

---
---

## 5. Resumen de Trabajo Realizado (Sesi√≥n del 26/08/2025)

Se implement√≥ toda la capa de base de datos y datos iniciales para la nueva arquitectura de "Fichas de Declaraci√≥n".

- **Migraciones:**
    - Se cre√≥ la migraci√≥n para la nueva tabla `declaraciones_stock`.
    - Se modific√≥ la migraci√≥n `create_stock_animals` para eliminar columnas redundantes y a√±adir la nueva clave for√°nea `declaracion_id`.
    - Se depuraron y corrigieron errores en las migraciones para asegurar un orden de operaciones correcto y evitar conflictos con las claves for√°neas.

- **Modelos:**
    - Se cre√≥ el nuevo modelo `app/Models/DeclaracionStock.php`.
    - Se definieron las relaciones (`belongsTo`, `hasMany`) en los modelos `DeclaracionStock`, `StockAnimal` y `Productor`.

- **Seeders (Datos de Prueba):**
    - Se actualiz√≥ `TipoRegistroSeeder` con valores m√°s descriptivos y relevantes para el nuevo flujo.
    - Se cre√≥ `ConfiguracionActualizacionSeeder` para asegurar que siempre exista un periodo de configuraci√≥n.
    - Se reorden√≥ `DatabaseSeeder` para respetar las dependencias entre los datos.
    - Se reescribi√≥ `StockAnimalSeeder` para que sea m√°s robusto y se alinee a la nueva arquitectura, creando una Declaraci√≥n y asociando el stock a ella.

---

## 6. Tareas Pendientes / Pr√≥ximos Pasos

1.  **Ejecutar la Migraci√≥n:** El usuario debe ejecutar `php artisan migrate:fresh --seed` para aplicar todos los cambios en la base de datos.
2.  **Retomar Tarea Original:** Volver a la refactorizaci√≥n de la vista de stock (`listar-stock`). La parte visual ya est√° hecha, pero falta la funcionalidad.
3.  **Implementar Funcionalidad de Botones:**
    - **Prioridad 1:** Bot√≥n "Ver Ficha" (üìã). Debe abrir un modal mostrando los detalles del registro de stock.
    - **Prioridad 2:** Bot√≥n "Ver Evoluci√≥n" (üìà). Debe mostrar un gr√°fico con el historial de esa categor√≠a de animal.
    - **Prioridad 3:** Bot√≥n "Imprimir" (üñ®Ô∏è).
4.  **Desarrollar Flujo de Declaraciones:** Crear la interfaz de usuario (vistas de Livewire) para la gesti√≥n de las "Fichas de Declaraci√≥n" que se describi√≥ en el plan (iniciar, guardar borrador, a√±adir l√≠neas de stock, finalizar).